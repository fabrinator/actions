name: Reusable workflow for AWS SAM
on:
  workflow_call:
    inputs:
      PYTHON_VERSION:
        required: true
        type: string
      PROJECT_FOLDER:
        required: true
        type: string
      AWS_ACCOUNT:
        required: true
        type: string
      AWS_DEPLOY_PROD:
        required: false
        type: string
        default: "['136273067277', '621897290135']"

env:
  REQUIREMENTS_FILE: ${{ inputs.PROJECT_FOLDER }}/tests/requirements.txt
  AWS_SAM_STACK_NAME: ${{ inputs.PROJECT_FOLDER }}
jobs:
  requirements:
    runs-on: ubuntu-latest
    name: Requirements
    environment:  auto
    outputs:
      python-version: ${{ steps.setup_python.outputs.python-version }}
      cache-hit-venv: ${{ steps.cache_venv.outputs.cache-hit }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - uses: actions/setup-python@v5
        id: setup_python
        with:
          python-version: ${{ inputs.PYTHON_VERSION }}
      - name: Restore cached virtualenv
        uses: actions/cache/restore@v4
        id: cache_venv
        with:
          key: venv-${{ runner.os }}-${{ steps.setup_python.outputs.python-version }}-${{ hashFiles(env.REQUIREMENTS_FILE) }}
          path: .venv
      - name: Configure venv
        id: venv
        run: |
          python -m venv .venv
          source .venv/bin/activate
          echo "$VIRTUAL_ENV/bin" >> $GITHUB_PATH
          echo "VIRTUAL_ENV=$VIRTUAL_ENV" >> $GITHUB_ENV
          echo "GITHUB_PATH=$GITHUB_PATH" >> $GITHUB_OUTPUT
      - name: Install python dependencies
        if: steps.cache_venv.outputs.cache-hit != 'true'
        run:
          python -m pip install -r ${{ env.REQUIREMENTS_FILE }}
      - name: Saved cached virtualenv
        uses: actions/cache/save@v4
        if: steps.cache_venv.outputs.cache-hit != 'true'
        with:
          key: venv-${{ runner.os }}-${{ steps.setup_python.outputs.python-version }}-${{ hashFiles(env.REQUIREMENTS_FILE) }}
          path: .venv

  build:
    runs-on: ubuntu-latest
    name: Build
    environment:  auto
    needs: requirements
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.PYTHON_VERSION }}
      - name: Restore cached virtualenv
        uses: actions/cache/restore@v4
        with:
          key: venv-${{ runner.os }}-${{ needs.requirements.outputs.python-version }}-${{ hashFiles(env.REQUIREMENTS_FILE) }}
          path: .venv
      - name: Activate venv
        run: |
          source .venv/bin/activate          
          echo "$VIRTUAL_ENV/bin" >> $GITHUB_PATH
          echo "VIRTUAL_ENV=$VIRTUAL_ENV" >> $GITHUB_ENV
          echo "GITHUB_PATH=$GITHUB_PATH" >> $GITHUB_OUTPUT
      - name: SAM Validate
        run: |
          sam validate
        working-directory: ${{ inputs.PROJECT_FOLDER }}
      - name: Run unit tests
        run: |
          coverage run -m pytest -v ${{ inputs.PROJECT_FOLDER }}/tests/unit
      - name: Coverage Report
        run: coverage report -m
  deploy-dev:
    runs-on: ubuntu-latest
    name: Deploy Dev
    environment:  auto
    needs: [build, requirements]
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: us-east-1
          role-to-assume: arn:aws:iam::${{ inputs.AWS_ACCOUNT }}:role/oidc-github-actions
      - name: Restore cached virtualenv
        uses: actions/cache/restore@v4
        with:
          key: venv-${{ runner.os }}-${{ needs.requirements.outputs.python-version }}-${{ hashFiles(env.REQUIREMENTS_FILE) }}
          path: .venv
      - name: Activate venv
        run: |
          source .venv/bin/activate          
          echo "$VIRTUAL_ENV/bin" >> $GITHUB_PATH
          echo "VIRTUAL_ENV=$VIRTUAL_ENV" >> $GITHUB_ENV
          echo "GITHUB_PATH=$GITHUB_PATH" >> $GITHUB_OUTPUT
      - name: SAM Build
        run: sam build
        working-directory: ${{ inputs.PROJECT_FOLDER }}
      - name: SAM Deploy
        run: sam deploy --capabilities CAPABILITY_NAMED_IAM --parameter-overrides Environment=dev --no-confirm-changeset --no-fail-on-empty-changeset
        working-directory: ${{ inputs.PROJECT_FOLDER }}
      - name: Integration tests
        run: pytest -v  ${{ inputs.PROJECT_FOLDER }}/tests/integration
  deploy-prod:
    needs: deploy-dev
    strategy:
      matrix:
        accounts: ${{ fromJSON(inputs.AWS_DEPLOY_PROD)}}
    runs-on: ubuntu-latest
    steps:
      - run: echo "${{ matrix.accounts }}"