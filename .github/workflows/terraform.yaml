name: Reusable workflow example
on:
  workflow_call:
    inputs:
      terraform_version:
        required: true
        type: string
      AWS_REGION:
        required: true
        type: string

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: ${{ inputs.AWS_REGION }}

jobs:
  requirements:
    runs-on: ubuntu-latest
    name: Requirements
    environment:  auto
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Enable Pull Request Automerge
      run: gh pr merge $GITHUB_HEAD_REF --merge --auto
      env:
        GH_TOKEN: ${{ github.token }}
    - uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ inputs.terraform_version }}
    - run: terraform --version
  terraform_plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    needs: requirements
    environment: auto
    outputs:
      exitcode: ${{ steps.plan.outputs.exitcode }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ inputs.terraform_version }}
      - run: terraform init
      - id: plan
        run: terraform plan -detailed-exitcode -no-color -out terraform.plan
      - run: terraform show -no-color terraform.plan >> $GITHUB_STEP_SUMMARY
      - uses: actions/github-script@v7
        name: Plan to comment
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>

            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`

            </details>

            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: Plan
          path: terraform.plan

  terraform_approval:
    if: needs.terraform_plan.outputs.exitcode == '2'
    name: Terraform Apply
    runs-on: ubuntu-latest
    needs: [ requirements, terraform_plan ]
    environment: manual_approval
    steps:
      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ inputs.terraform_version }}
      - name: Checkout
        uses: actions/checkout@v3
      - uses: hashicorp/setup-terraform@v3
      - name: Download terraform plan
        uses: actions/download-artifact@v3
        with:
          name: Plan
      - name: Terraform Apply
        run: terraform init && terraform apply terraform.plan
