name: Reusable workflow
on:
  workflow_call:
    inputs:
      TERRAFORM_VERSION:
        required: true
        type: string
      AWS_REGION:
        required: true
        type: string
      TF_WORKING_DIRECTORY:
        required: true
        type: string
      TF_EXTRA_OPTIONS:
        required: false
        type: string
      TF_WORKSPACE:
        required: true
        type: string
      TF_PROVIDER_AWS_ACCOUNT:
        required: false
        type: string
      GH_OIDC_AUTH:
        required: false
        type: boolean
        default: true
      AUTO_MERGE:
        required: false
        type: boolean
        default: false



env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: ${{ inputs.AWS_REGION }}
  TF_VAR_AWS_SHARED_ACCOUNT: ${{ secrets.AWS_SHARED_ACCOUNT }}
  TF_PLAN_FILE: terraform-${{ inputs.TF_WORKSPACE }}.plan


jobs:
  requirements:
    runs-on: ubuntu-latest
    name: Requirements
    environment:  auto
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Enable Pull Request Automerge
      run: gh pr merge $GITHUB_HEAD_REF --merge --auto
      env:
        GH_TOKEN: ${{ github.token }}
      if: ${{ inputs.AUTO_MERGE == true }}
    - uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ inputs.TERRAFORM_VERSION }}
    - run: terraform --version
  terraform_plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    needs: requirements
    environment: auto
    outputs:
      exitcode: ${{ steps.plan.outputs.exitcode }}
      id_token: ${{ steps.idtoken.outputs.id_token }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: us-east-1
          role-to-assume: arn:aws:iam::${{ secrets.AWS_SHARED_ACCOUNT }}:role/oidc-github-actions
        if: ${{ inputs.GH_OIDC_AUTH == true }}
      - name: Setup environment credentials for accessing to the terraform backend
        run: eval "$(aws configure export-credentials --format env)"
        if: ${{ inputs.GH_OIDC_AUTH == true }}
      - name: Install OIDC Client from Core Package
        run: npm install @actions/core@1.6.0 @actions/http-client
        if: ${{ inputs.GH_OIDC_AUTH == true }}
      - name: Get Id Token for terraform providers can assume the role
        uses: actions/github-script@v7
        id: idtoken
        with:
          script: |
            const action_core = require('@actions/core')
            let id_token = await action_core.getIDToken('sts.amazonaws.com')
            action_core.setOutput('id_token', id_token)
        if: ${{ inputs.GH_OIDC_AUTH == true }}
      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ inputs.TERRAFORM_VERSION }}
      - name: Terraform Init
        run: terraform init
        working-directory: ${{ inputs.TF_WORKING_DIRECTORY }}
        env:
          TF_VAR_id_token: ${{ steps.idtoken.outputs.id_token }}
      - name: Terraform Workspace
        run: terraform workspace select -or-create ${{ inputs.TF_WORKSPACE }}
      - id: plan
        working-directory: ${{ inputs.TF_WORKING_DIRECTORY }}
        run: terraform plan -detailed-exitcode -no-color -out ${{ env.TF_PLAN_FILE }} ${{ inputs.TF_EXTRA_OPTIONS }}
        env:
          TF_VAR_id_token: ${{ steps.idtoken.outputs.id_token }}
          TF_VAR_TF_PROVIDER_AWS_ACCOUNT: ${{ inputs.TF_PROVIDER_AWS_ACCOUNT }}
      - run: terraform show -no-color ${{ env.TF_PLAN_FILE }}  >> $GITHUB_STEP_SUMMARY
        working-directory: ${{ inputs.TF_WORKING_DIRECTORY }}
      - uses: actions/github-script@v7
        name: Plan to comment
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>

            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`

            </details>

            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.TF_PLAN_FILE }}
          path: ${{ inputs.TF_WORKING_DIRECTORY }}/${{ env.TF_PLAN_FILE }}

  terraform_approval:
    if: needs.terraform_plan.outputs.exitcode == '2'
    name: Terraform Apply
    runs-on: ubuntu-latest
    needs: [ requirements, terraform_plan ]
    environment:  ${{ inputs.TF_WORKSPACE == 'prod' && 'manual_approval' || 'auto' }}
    steps:
      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ inputs.TERRAFORM_VERSION }}
      - name: Checkout
        uses: actions/checkout@v3
      - uses: hashicorp/setup-terraform@v3
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: us-east-1
          role-to-assume: arn:aws:iam::${{ secrets.AWS_SHARED_ACCOUNT }}:role/oidc-github-actions
        if: ${{ inputs.GH_OIDC_AUTH == true }}
      - name: Setup environment credentials for accessing to the terraform backend
        run: eval "$(aws configure export-credentials --format env)"
        if: ${{ inputs.GH_OIDC_AUTH == true }}
      - name: Download terraform plan
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.TF_PLAN_FILE }}
          path: ${{ inputs.TF_WORKING_DIRECTORY }}/
      - name: Terraform Init
        run: terraform init
        working-directory: ${{ inputs.TF_WORKING_DIRECTORY }}
        env:
          TF_VAR_id_token: ${{ steps.idtoken.outputs.id_token }}
      - name: Terraform Workspace
        run: terraform workspace select -or-create ${{ inputs.TF_WORKSPACE }}
      - name: Terraform Apply
        working-directory: ${{ inputs.TF_WORKING_DIRECTORY }}
        run: terraform apply ${{ env.TF_PLAN_FILE }}
        env:
          TF_VAR_id_token: ${{ needs.terraform_plan.outputs.id_token }}
          GITHUB_TOKEN: ${{ secrets.GHA_TF_REPOSITORIES_AUTOMATION }}
          TF_VAR_TF_PROVIDER_AWS_ACCOUNT: ${{ inputs.TF_PROVIDER_AWS_ACCOUNT }}